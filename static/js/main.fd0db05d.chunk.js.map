{"version":3,"sources":["themes.js","components/Header.js","components/Editor.js","components/Output.js","App.js","reportWebVitals.js","index.js"],"names":["lightTheme","body","fontColor","darkTheme","GlobalStyles","createGlobalStyle","props","theme","Header","darkMode","downloadFile","runFile","className","href","onClick","Editor","onCodeChange","placeholder","width","mode","onChange","newValue","name","editorProps","$blockScrolling","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","Output","runcode","title","srcdoc","StyledApp","styled","div","App","useState","setTheme","code","setCode","runCode","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","appendChild","click","removeChild","download","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4NAEaA,EAAa,CACxBC,KAAM,OACNC,UAAW,QAGAC,EAAY,CACvBF,KAAM,OACNC,UAAW,QAGAE,EAAeC,YAAH,+EAIH,SAACC,GAAD,OAAWA,EAAMC,MAAMN,Q,OCH9BO,EAXA,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,aAAaC,EAAa,EAAbA,QAErC,OACE,qBAAIC,UAAU,aAAd,UACE,6BAAI,mBAAGC,KAAK,sBAAsBC,QAASL,EAAvC,yBACJ,6BAAI,mBAAGI,KAAK,sBAAsBC,QAASJ,EAAvC,oBACJ,6BAAI,mBAAGG,KAAK,sBAAsBC,QAASH,EAAvC,0B,iBC0BKI,G,kBA1BA,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAMhB,OACE,qBAAKJ,UAAU,SAAf,SACE,cAAC,IAAD,CACEK,YAAY,yBACZC,MAAM,OACNC,KAAK,OACLZ,MAAM,SACNa,SAXN,SAAkBC,GAChBL,EAAaK,IAWTC,KAAK,mBACLC,YAAa,CAAEC,iBAAiB,GAChCC,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,SCfXC,EATA,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAEhB,OACE,qBAAKlB,UAAU,SAAf,SACE,wBAAQA,UAAU,eAAemB,MAAM,gBAAgBC,OAAQF,OCC/DG,EAAYC,IAAOC,IAAV,2CACJ,SAAC7B,GAAD,OAAWA,EAAMC,MAAML,aAsDnBkC,MAnDf,WAEE,MAA0BC,mBAAS,SAAnC,mBAAO9B,EAAP,KAAc+B,EAAd,KA2BA,EAAwBD,mBAAS,IAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAA2BH,mBAAS,IAApC,mBAAOP,EAAP,KAAgBW,EAAhB,KAKA,OACE,eAAC,IAAD,CAAelC,MAAiB,UAAVA,EAAoBP,EAAaG,EAAvD,UACE,cAACC,EAAD,IACA,cAAC6B,EAAD,UACE,sBAAKrB,UAAU,MAAf,UACE,cAAC,EAAD,CAAQH,SArCK,WACC6B,EAAV,UAAV/B,EAA6B,OAAmB,UAoCVG,aAjCnB,YASrB,SAAkBgC,EAAUC,GAC1B,IAAIC,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBL,IACnFC,EAAQG,aAAa,WAAYL,GAEjCE,EAAQK,MAAMC,QAAU,OACxBL,SAAS5C,KAAKkD,YAAYP,GAE1BA,EAAQQ,QAERP,SAAS5C,KAAKoD,YAAYT,GAjB1BU,CADe,eACIf,IA+B+C5B,QA5BpD,WACd8B,EAAQF,MA4BF,sBAAKgB,GAAG,kBAAR,UACE,cAAC,EAAD,CAAQvC,aAXlB,SAAsBK,GACpBmB,EAAQnB,MAWA,cAAC,EAAD,CAAQS,QAASA,gBC3Cd0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,K","file":"static/js/main.fd0db05d.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const lightTheme = {\n  body: \"#fff\",\n  fontColor: \"#000\",\n};\n\nexport const darkTheme = {\n  body: \"#000\",\n  fontColor: \"#fff\",\n};\n\nexport const GlobalStyles = createGlobalStyle`\n\n\tbody {\n\n\t\tbackground-color: ${(props) => props.theme.body};\n\n\t}\n\n`;\n","import React from 'react';\n\nconst Header = ({darkMode,downloadFile,runFile}) => {\n \n  return (\n    <ul className=\"horizontal\">\n      <li><a href=\"javascript:void(0);\" onClick={darkMode}>Dark Mode</a></li>\n      <li><a href=\"javascript:void(0);\" onClick={downloadFile}>Save</a></li>\n      <li><a href=\"javascript:void(0);\" onClick={runFile}>Run >></a></li>\n    </ul>\n  )\n}\n\nexport default Header","import React from 'react';\nimport AceEditor from \"react-ace\";\n\nimport \"ace-builds/src-noconflict/mode-java\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/ext-language_tools\"\nimport '../App.css';\n\nconst Editor = ({ onCodeChange }) => {\n \n  function onChange(newValue) {\n    onCodeChange(newValue);\n  }\n\n  return (\n    <div className=\"editor\">\n      <AceEditor\n        placeholder=\"//write your code here\"\n        width=\"100%\"\n        mode=\"java\"\n        theme=\"github\"\n        onChange={onChange}\n        name=\"UNIQUE_ID_OF_DIV\"\n        editorProps={{ $blockScrolling: true }}\n        setOptions={{\n          enableBasicAutocompletion: true,\n          enableLiveAutocompletion: true,\n          enableSnippets: true\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Editor","import React from 'react';\nimport '../App.css';\n\nconst Output = ({ runcode }) => {\n \n  return (\n    <div className=\"output\">\n      <iframe className=\"output-frame\" title=\"Output screen\" srcdoc={runcode}></iframe>\n    </div>\n  )\n}\n\nexport default Output\n","import React, { useState } from 'react';\nimport './App.css';\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { lightTheme, darkTheme, GlobalStyles } from \"./themes.js\";\nimport Header from './components/Header'\nimport Editor from './components/Editor';\nimport Output from './components/Output';\n\nconst StyledApp = styled.div`\n  color: ${(props) => props.theme.fontColor};\n`;\n\nfunction App() {\n  \n  const [theme, setTheme] = useState(\"light\");\n  const themeToggler = () => {\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n  };\n\n  const downloadFile = () => {\n    var filename = \"download.txt\";\n    download(filename, code);\n  };\n\n  const runFile = () => {\n    runCode(code);\n  };\n\n  function download(filename, text) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n  }\n\n  const [code, setCode] = useState('')\n  const [runcode, runCode] = useState('')\n  function onCodeChange(newValue) {\n    setCode(newValue);\n  }\n  \n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <GlobalStyles />\n      <StyledApp>\n        <div className=\"App\">\n          <Header darkMode={themeToggler} downloadFile={downloadFile} runFile={runFile}/>\n          <div id=\"editorcontainer\">\n            <Editor onCodeChange={onCodeChange} />\n            <Output runcode={runcode} />\n          </div>\n        </div>\n      </StyledApp>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n\n\n\n\n\n\n      \n    \n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}